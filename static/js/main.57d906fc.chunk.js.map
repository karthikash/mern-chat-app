{"version":3,"sources":["config/Constants.js","components/Templates/Header.js","components/Templates/Footer.js","components/Auth/Register.js","components/Auth/Login.js","components/User/Chat.js","components/Templates/Auth.js","components/User/Profile.js","components/Auth/ResetPassword.js","App.js","index.js"],"names":["Constants","REACT_APP_API_BASE_URL","process","REACT_APP_JWT_SECRET_KEY","REACT_APP_SOCKET","Header","isAuth","_id","localStorage","getItem","token","verify","logout","httpHeaders","options","method","headers","Headers","fetch","then","removeItem","window","location","reload","catch","error","console","log","deactivateAccount","this","sImage","Navbar","color","light","expand","NavbarBrand","href","Nav","className","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","onClick","divider","NavItem","Media","src","alt","Component","Footer","NavbarText","rel","target","Register","props","getInitialState","data","sFirstName","sLastName","sUsername","sPassword","sConfirmPassword","errors","response","status","message","handleChange","e","setState","state","name","value","validate","isAlpha","length","handleSubmit","preventDefault","Object","keys","body","JSON","stringify","success","a","json","Form","onSubmit","FormGroup","Label","for","Input","id","invalid","onChange","autoComplete","FormFeedback","type","Button","block","Login","credentials","setItem","assign","socket","io","Chat","autoscroll","messagesEnd","scrollIntoView","behavior","userList","selectedUser","activeIndex","userId","username","dp","lastseen","chat","files","media","messages","isActive","index","user","createdAt","receiver","uploadButton","$","trigger","sendMessage","FormData","append","emit","sMessage","oFrom","oTo","isMessageTyped","createRef","on","socketid","receiverId","users","map","ListGroupItem","bind","Row","Col","md","style","Card","CardBody","CardSubtitle","tag","ListGroup","Container","moment","fromNow","fontSize","paddingBottom","border","textAlign","includes","height","width","padding","controls","autoPlay","muted","borderRadius","backgroundColor","borderColor","ref","el","float","clear","aria-hidden","accept","display","paddingLeft","disabled","Auth","toggle","tab","activeTab","tabs","NavLink","classnames","active","TabContent","TabPane","tabId","Profile","eGender","updatedAt","uploadProfilePic","isFileSelected","CardImg","top","multiple","CardTitle","ResetPassword","App","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57d906fc.chunk.js","sourcesContent":["const Constants = {\r\n    REACT_APP_API_BASE_URL: process.env.REACT_APP_API_BASE_URL,\r\n    REACT_APP_JWT_SECRET_KEY: process.env.REACT_APP_JWT_SECRET_KEY,\r\n    REACT_APP_SOCKET: process.env.REACT_APP_SOCKET,\r\n}\r\n\r\nexport default Constants;","import { Component } from \"react\"\r\nimport { DropdownItem, DropdownMenu, DropdownToggle, Media, Nav, Navbar, NavbarBrand, NavItem, UncontrolledDropdown } from \"reactstrap\";\r\nimport { verify } from 'jsonwebtoken';\r\nimport { Constants } from '../../config';\r\n\r\nclass Header extends Component {\r\n\r\n    isAuth = () => {\r\n        const _id = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        if (!_id || !token) return false;\r\n        const decoded = verify(token, Constants.REACT_APP_JWT_SECRET_KEY);\r\n        if (decoded._id === _id) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        const _id = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        const httpHeaders = {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json;charset=UTF-8',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n        const options = {\r\n            method: 'POST',\r\n            headers: new Headers(httpHeaders)\r\n        };\r\n        fetch(`${Constants.REACT_APP_API_BASE_URL}/auth/logout/${_id}`, options)\r\n            .then(() => {\r\n                localStorage.removeItem('_id');\r\n                localStorage.removeItem('token');\r\n                localStorage.removeItem('dp');\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.log('error: ', error);\r\n            });\r\n    }\r\n\r\n    deactivateAccount = () => {\r\n        const _id = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        const httpHeaders = {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json;charset=UTF-8',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n        const options = {\r\n            method: 'DELETE',\r\n            headers: new Headers(httpHeaders)\r\n        };\r\n        fetch(`${Constants.REACT_APP_API_BASE_URL}/user/delete/${_id}`, options)\r\n            .then(() => {\r\n                localStorage.removeItem('_id');\r\n                localStorage.removeItem('token');\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.log('error: ', error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.isAuth()) {\r\n            return (\r\n                <div>\r\n                    <Navbar color=\"faded\" light expand=\"md\">\r\n                        <NavbarBrand href=\"/chat\">Mern Chat App</NavbarBrand>\r\n                    </Navbar>\r\n                </div>\r\n            )\r\n        } else {\r\n            const sImage = localStorage.getItem('dp');\r\n            return (\r\n                <div>\r\n                    <Navbar color=\"faded\" light expand=\"md\">\r\n                        <NavbarBrand href=\"/chat\">Mern Chat App</NavbarBrand>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <UncontrolledDropdown nav inNavbar>\r\n                                <DropdownToggle nav caret>Account</DropdownToggle>\r\n                                <DropdownMenu right>\r\n                                    <DropdownItem href=\"/profile\">  Profile </DropdownItem>\r\n                                    <DropdownItem onClick={this.logout}> Logout </DropdownItem>\r\n                                    <DropdownItem href=\"/reset\">Reset Password </DropdownItem>\r\n                                    <DropdownItem divider />\r\n                                    <DropdownItem onClick={this.deactivateAccount}>  Deactivate Account   </DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                            <NavItem>\r\n                                <Media className=\"dp\" src={sImage} alt=\"Name\" />\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Navbar>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default Header;","import { Component } from \"react\"\r\nimport { Nav, Navbar, NavbarText } from \"reactstrap\";\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"faded\" light expand=\"md\">\r\n                    <Nav navbar>\r\n                        <NavbarText>Chat App &copy; 2020. All Rights Reserved</NavbarText>\r\n                    </Nav>\r\n                    <Nav className=\"ml-auto\" navbar>\r\n                        <NavbarText>Created by <a href=\"https://github.com/kpenhanced\" rel=\"noreferrer\" target=\"_blank\">Karthik Ashokkumar</a> </NavbarText>\r\n                    </Nav>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Footer;","import { Component } from \"react\";\r\nimport { Form, FormGroup, FormFeedback, Label, Input, Button } from \"reactstrap\";\r\nimport { isAlpha } from \"validator\";\r\nimport { Constants } from '../../config';\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => ({\r\n        data: {\r\n            sFirstName: '',\r\n            sLastName: '',\r\n            sUsername: '',\r\n            sPassword: '',\r\n            sConfirmPassword: ''\r\n        },\r\n        errors: {},\r\n        response: {\r\n            status: '',\r\n            message: '',\r\n            error: ''\r\n        }\r\n    });\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                [e.target.name]: e.target.value\r\n            },\r\n            errors: {\r\n                ...this.state.errors,\r\n                [e.target.name]: ''\r\n            }\r\n        });\r\n    }\r\n\r\n    validate = () => {\r\n        const { data } = this.state;\r\n        let errors = {};\r\n        if (!isAlpha(data.sFirstName)) errors.sFirstName = 'First name must only contain alphabets.';\r\n        if (data.sFirstName === '') errors.sFirstName = 'First name cannot be empty.';\r\n        if (!isAlpha(data.sLastName)) errors.sLastName = 'Last name must only contain alphabets.';\r\n        if (data.sLastName === '') errors.sLastName = 'Last name cannot be empty.';\r\n        if (data.sUsername === '') errors.sUsername = 'Username cannot be empty.';\r\n        if (data.sPassword.length < 8) errors.sPassword = 'Password must be atleast 8 characters.'\r\n        if (data.sPassword === '') errors.sPassword = 'Password cannot be empty.';\r\n        if (data.sPassword !== data.sConfirmPassword) errors.sConfirmPassword = `Passwords doesn't match.`;\r\n        if (data.sConfirmPassword.length < 8) errors.sConfirmPassword = 'Password must be atleast 8 characters.'\r\n        if (data.sConfirmPassword === '') errors.sConfirmPassword = 'Password cannot be empty.';\r\n        return errors;\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { data } = this.state;\r\n        const errors = this.validate();\r\n        if (Object.keys(errors).length === 0) {\r\n            delete data['sConfirmPassword'];\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json;charset=UTF-8'\r\n                },\r\n                body: JSON.stringify(data)\r\n            };\r\n            fetch(`${Constants.REACT_APP_API_BASE_URL}/auth/signup`, options)\r\n                .then(async (success) => {\r\n                    const response = await success.json();\r\n                    this.setState({ response });\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error: ', error);\r\n                });\r\n            this.setState(this.getInitialState());\r\n        } else {\r\n            this.setState({ errors });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { data, errors, response } = this.state;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label for=\"sFirstName\">First Name</Label>\r\n                    <Input id=\"sFirstName\" name=\"sFirstName\" invalid={errors.sFirstName ? true : false} onChange={this.handleChange} value={data.sFirstName} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sFirstName}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"sLastName\">Last Name</Label>\r\n                    <Input id=\"sLastName\" name=\"sLastName\" invalid={errors.sLastName ? true : false} onChange={this.handleChange} value={data.sLastName} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sLastName}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"sUsername\">Username</Label>\r\n                    <Input id=\"sUsername\" name=\"sUsername\" invalid={errors.sUsername ? true : false} onChange={this.handleChange} value={data.sUsername} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sUsername}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"sPassword\">Password</Label>\r\n                    <Input id=\"sPassword\" name=\"sPassword\" type=\"password\" invalid={errors.sPassword ? true : false} onChange={this.handleChange} value={data.sPassword} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sPassword}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"sConfirmPassword\">Confirm Password</Label>\r\n                    <Input id=\"sConfirmPassword\" name=\"sConfirmPassword\" type=\"password\" invalid={errors.sConfirmPassword ? true : false} onChange={this.handleChange} value={data.sConfirmPassword} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sConfirmPassword}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    {\r\n                        response.message ?\r\n                            (response.status > 400 ?\r\n                                (<div className=\"alert alert-danger\">{response.message}</div>)\r\n                                : (<div className=\"alert alert-success\">{response.message}</div>))\r\n                            : (null)\r\n                    }\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Button color=\"primary\" block>Register</Button>\r\n                </FormGroup>\r\n            </Form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Register;","import { Component } from \"react\";\r\nimport { Form, FormGroup, FormFeedback, Label, Input, Button } from \"reactstrap\";\r\nimport { Constants } from '../../config';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => ({\r\n        data: {\r\n            sUsername: '',\r\n            sPassword: ''\r\n        },\r\n        errors: {},\r\n        response: {\r\n            status: '',\r\n            message: '',\r\n            error: ''\r\n        }\r\n    });\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                [e.target.name]: e.target.value\r\n            },\r\n            errors: {\r\n                ...this.state.errors,\r\n                [e.target.name]: ''\r\n            }\r\n        });\r\n    }\r\n\r\n    validate = () => {\r\n        const { data } = this.state;\r\n        let errors = {};\r\n        if (data.sUsername === '') errors.sUsername = 'Username cannot be empty.';\r\n        if (data.sPassword.length < 8) errors.sPassword = 'Password must be atleast 8 characters.'\r\n        if (data.sPassword === '') errors.sPassword = 'Password cannot be empty.';\r\n        return errors;\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { data } = this.state;\r\n        const errors = this.validate();\r\n        if (Object.keys(errors).length === 0) {\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json;charset=UTF-8'\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify(data)\r\n            };\r\n            fetch(`${Constants.REACT_APP_API_BASE_URL}/auth/signin`, options)\r\n                .then(async (success) => {\r\n                    const response = await success.json();\r\n                    this.setState({ response });\r\n                    if (response.status === 200) {\r\n                        localStorage.setItem('_id', response._id);\r\n                        localStorage.setItem('token', response.token);\r\n                        localStorage.setItem('dp', response.sImage);\r\n                        return window.location.assign('/chat');\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error: ', error);\r\n                });\r\n            this.setState(this.getInitialState());\r\n        } else {\r\n            this.setState({ errors });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { data, errors, response } = this.state;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label for=\"sUsername\">Username</Label>\r\n                    <Input id=\"sUsername\" name=\"sUsername\" invalid={errors.sUsername ? true : false} onChange={this.handleChange} value={data.sUsername} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sUsername}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"sPassword\">Password</Label>\r\n                    <Input id=\"sPassword\" name=\"sPassword\" type=\"password\" invalid={errors.sPassword ? true : false} onChange={this.handleChange} value={data.sPassword} autoComplete=\"off\" />\r\n                    <FormFeedback>{errors.sPassword}</FormFeedback>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    {\r\n                        response.message ?\r\n                            (response.status > 400 ?\r\n                                (<div className=\"alert alert-danger\">{response.message}</div>)\r\n                                : (<div className=\"alert alert-success\">{response.message}</div>))\r\n                            : (null)\r\n                    }\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Button color=\"primary\" block>Login</Button>\r\n                </FormGroup>\r\n            </Form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Login;","import { Component, createRef } from \"react\";\r\nimport { Button, Card, CardBody, CardSubtitle, Col, Container, Form, FormFeedback, FormGroup, Input, ListGroup, ListGroupItem, Media, Row } from \"reactstrap\";\r\nimport { Constants } from '../../config';\r\nimport $ from 'jquery';\r\nimport moment from 'moment';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io(Constants.REACT_APP_SOCKET);\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n        this.messagesEnd = createRef();\r\n        this.socket = socket;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.autoscroll();\r\n        //this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\r\n    }\r\n\r\n    autoscroll = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\r\n    }\r\n\r\n    getInitialState = () => ({\r\n        userList: [],\r\n        errors: {},\r\n        response: {\r\n            status: '',\r\n            message: '',\r\n            error: ''\r\n        },\r\n        selectedUser: {\r\n            activeIndex: null,\r\n            userId: '',\r\n            name: '',\r\n            username: '',\r\n            dp: '',\r\n            lastseen: ''\r\n        },\r\n        chat: {\r\n            message: '',\r\n        },\r\n        files: {\r\n            media: ''\r\n        },\r\n        messages: []\r\n    });\r\n\r\n    handleChange = (e) => {\r\n        if (e.target.files) {\r\n            this.setState({\r\n                files: {\r\n                    media: e.target.files[0]\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                chat: {\r\n                    ...this.state.chat,\r\n                    [e.target.name]: e.target.value,\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.autoscroll();\r\n        this.socket.on('socket.id', (socketid) => {\r\n            localStorage.setItem('socketid', socketid);\r\n        });\r\n\r\n        this.socket.on('refresh_messages', receiverId => {\r\n            console.log(receiverId);\r\n            const _id = localStorage.getItem('_id');\r\n            const { selectedUser } = this.state;\r\n            if (_id === receiverId) {\r\n                this.isActive(selectedUser.activeIndex, selectedUser);\r\n                this.socket.emit('receiver', true);\r\n            } else {\r\n                this.socket.emit('receiver', false);\r\n            }\r\n        });\r\n\r\n        const _id = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        const httpHeaders = {\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n        const options = {\r\n            method: 'GET',\r\n            headers: new Headers(httpHeaders)\r\n        }\r\n        fetch(`${Constants.REACT_APP_API_BASE_URL}/user/list?_id=${_id}`, options)\r\n            .then(async (success) => {\r\n                const response = await success.json();\r\n                this.setState({\r\n                    'userList': response.data\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    isActive = (index, user) => {\r\n        if (user && user.userId) {\r\n            this.setState({\r\n                selectedUser: {\r\n                    activeIndex: index,\r\n                    userId: user.userId,\r\n                    name: user.name,\r\n                    username: user.username,\r\n                    dp: user.dp,\r\n                    lastseen: user.lastseen\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({\r\n                selectedUser: {\r\n                    activeIndex: index,\r\n                    userId: user._id,\r\n                    name: `${user.sFirstName} ${user.sLastName}`,\r\n                    username: user.sUsername,\r\n                    dp: user.sImage,\r\n                    lastseen: user.createdAt\r\n                }\r\n            });\r\n        }\r\n        const userId = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        const receiver = user._id || user.userId;\r\n        const httpHeaders = {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json;charset=UTF-8',\r\n            'Authorization': `Bearer ${token}`\r\n        };\r\n        const options = {\r\n            method: 'GET',\r\n            headers: new Headers(httpHeaders)\r\n        };\r\n        fetch(`${Constants.REACT_APP_API_BASE_URL}/chat/list?sender=${userId}&receiver=${receiver}`, options)\r\n            .then(async (success) => {\r\n                const json = await success.json();\r\n                this.setState({\r\n                    messages: json.data\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log('error: ', error);\r\n            });\r\n    }\r\n\r\n    uploadButton = () => {\r\n        $('input[type=file]').trigger('click');\r\n    }\r\n\r\n    sendMessage = (e) => {\r\n        e.preventDefault();\r\n        const { chat, selectedUser, files } = this.state;\r\n        const userId = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        if (files && files.media) {\r\n            const data = new FormData();\r\n            data.append('oFrom', userId);\r\n            data.append('oTo', selectedUser.userId);\r\n            data.append('media', files.media);\r\n            const httpHeaders = {\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n            const options = {\r\n                method: 'POST',\r\n                headers: new Headers(httpHeaders),\r\n                body: data\r\n            };\r\n            fetch(`${Constants.REACT_APP_API_BASE_URL}/chat/upload`, options)\r\n                .then((success) => {\r\n                    this.setState({\r\n                        selectedUser: {\r\n                            activeIndex: selectedUser.activeIndex,\r\n                            userId: selectedUser.userId,\r\n                            name: selectedUser.name,\r\n                            username: selectedUser.username,\r\n                            dp: selectedUser.dp,\r\n                            lastseen: selectedUser.lastseen\r\n                        },\r\n                        files: {\r\n                            media: ''\r\n                        }\r\n                    });\r\n                    this.isActive(selectedUser.activeIndex, selectedUser);\r\n                    this.socket.emit('new_text_message', {\r\n                        sMessage: chat.message,\r\n                        oFrom: userId,\r\n                        oTo: selectedUser.userId\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error: ', error);\r\n                });\r\n        } else {\r\n            const httpHeaders = {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n            const options = {\r\n                method: 'POST',\r\n                headers: new Headers(httpHeaders),\r\n                body: JSON.stringify({\r\n                    sMessage: chat.message,\r\n                    oFrom: userId,\r\n                    oTo: selectedUser.userId\r\n                })\r\n            };\r\n            fetch(`${Constants.REACT_APP_API_BASE_URL}/chat/send`, options)\r\n                .then(async (success) => {\r\n                    this.setState({\r\n                        chat: {\r\n                            message: ''\r\n                        }\r\n                    });\r\n                    this.isActive(selectedUser.activeIndex, selectedUser);\r\n                    this.socket.emit('new_text_message', {\r\n                        sMessage: chat.message,\r\n                        oFrom: userId,\r\n                        oTo: selectedUser.userId\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error: ', error);\r\n                });\r\n        }\r\n    }\r\n\r\n    isMessageTyped = () => {\r\n        const { message } = this.state.chat;\r\n        const { media } = this.state.files;\r\n        if (message && message.length > 0) {\r\n            return true;\r\n        } else if (typeof media === \"object\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { activeIndex, name, dp, lastseen } = this.state.selectedUser;\r\n        const { chat, messages, userList } = this.state;\r\n        const users = (userList && userList.length > 0 ?\r\n            userList.map((user, index) => {\r\n                const className = activeIndex === index ? 'active' : '';\r\n                return <ListGroupItem className={className} key={user._id} onClick={this.isActive.bind(this, index, user)}>\r\n                    <Row>\r\n                        <Col md=\"3\">\r\n                            <span className=\"pull-left\">\r\n                                <Media className=\"dp\" src={user.sImage} />\r\n                            </span>\r\n                        </Col>\r\n                        <Col md=\"9\">\r\n                            {`${user.sFirstName} ${user.sLastName}`}<br />\r\n                            <em style={{ color: \"black\" }}>{`@${user.sUsername}`}</em>\r\n                        </Col>\r\n                    </Row>\r\n                </ListGroupItem>\r\n            })\r\n            :\r\n            null\r\n        );\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md=\"4\">\r\n                        <Card className=\"chat-card\">\r\n                            <CardBody>\r\n                                <CardSubtitle tag=\"h5\" className=\"mb-2 text-muted\">Users</CardSubtitle>\r\n                                <br />\r\n                                <ListGroup className=\"scroll\">{users ? users : null}</ListGroup>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md=\"8\">\r\n                        <Card className=\"chat-card\">\r\n                            <CardBody>\r\n                                <CardSubtitle className=\"text-muted\">\r\n                                    <Row>\r\n                                        <Col md=\"1\">\r\n                                            <span className=\"pull-left\">\r\n                                                <Media className=\"dp\" src={dp} />\r\n                                            </span>\r\n                                        </Col>\r\n                                        <Col md=\"11\" className=\"pull-left\">\r\n                                            <Container>\r\n                                                <Row>\r\n                                                    {name}\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    {lastseen ?\r\n                                                        <small><em> {'last seen ' + moment(lastseen).fromNow()}</em></small>\r\n                                                        : <span className=\"m-auto\" style={{ fontSize: \"20px\" }}>Click on user to start chat</span>}\r\n                                                </Row>\r\n                                            </Container>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardSubtitle>\r\n                                <hr />\r\n                                <ListGroup className=\"scroll\" style={{ paddingBottom: \"60px\" }}>\r\n                                    {messages && messages.length > 0 ?\r\n                                        messages.map((message, index) => {\r\n                                            const _id = localStorage.getItem('_id');\r\n                                            return (_id === message.oFrom._id ?\r\n                                                <ListGroupItem key={index} style={{ border: \"none\" }}>\r\n                                                    <Row>\r\n                                                        <Col md=\"6\"></Col>\r\n                                                        <Col md=\"6\" style={{ textAlign: \"end\" }}>\r\n                                                            {message.sMessage.includes('http://') ?\r\n                                                                (message.sMessage.includes('.mp4') ?\r\n                                                                    <video src={message.sMessage} height=\"100%\" width=\"100%\" style={{ padding: \"8px\" }} controls autoPlay muted></video>\r\n                                                                    :\r\n                                                                    <img src={message.sMessage} height=\"100%\" width=\"100%\" alt=\"\" style={{ borderRadius: \"10px\", padding: \"8px\" }}></img>\r\n                                                                )\r\n                                                                :\r\n                                                                <span style={{ backgroundColor: \"#f7f7f7\", borderColor: \"#292b2c\", borderRadius: \"40px\", padding: \"8px\" }}>\r\n                                                                    {message.sMessage}\r\n                                                                </span>\r\n                                                            }\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroupItem> :\r\n                                                <ListGroupItem key={index} style={{ border: \"none\" }}>\r\n                                                    <Row>\r\n                                                        <Col md=\"6\" style={{ textAlign: \"start\" }}>\r\n                                                            {message.sMessage.includes('http://') ?\r\n                                                                (message.sMessage.includes('.mp4') ?\r\n                                                                    <video src={message.sMessage} height=\"100%\" width=\"100%\" style={{ padding: \"8px\" }} controls autoPlay muted></video>\r\n                                                                    :\r\n                                                                    <img src={message.sMessage} height=\"100%\" width=\"100%\" alt=\"\" style={{ borderRadius: \"10px\", padding: \"8px\" }}></img>\r\n                                                                )\r\n                                                                :\r\n                                                                <span style={{ backgroundColor: \"#f7f7f7\", borderColor: \"#292b2c\", borderRadius: \"40px\", padding: \"8px\" }}>\r\n                                                                    {message.sMessage}\r\n                                                                </span>\r\n                                                            }\r\n                                                        </Col>\r\n                                                        <Col md=\"6\"></Col>\r\n                                                    </Row>\r\n                                                </ListGroupItem>\r\n                                            )\r\n                                        }) :\r\n                                        null\r\n                                    }\r\n                                    <div ref={el => { this.messagesEnd = el; }} style={{ float: \"left\", clear: \"both\" }} > </div>\r\n                                </ListGroup>\r\n                                {activeIndex === 0 || activeIndex >= 1 ?\r\n                                    <Form className=\"chat-form\" onSubmit={this.sendMessage}>\r\n                                        <Row>\r\n                                            <Col md=\"1\">\r\n                                                <FormGroup>\r\n                                                    <Button onClick={this.uploadButton}>\r\n                                                        <i className=\"fa fa-camera\" aria-hidden=\"true\"></i>\r\n                                                    </Button>\r\n                                                    <Input type=\"file\" id=\"media\" name=\"media\" accept=\"image/*, video/*\" style={{ display: \"none\" }} onChange={this.handleChange} />\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md=\"10\">\r\n                                                <FormGroup style={{ paddingLeft: \"25px\" }}>\r\n                                                    <Input type=\"text\" id=\"message\" name=\"message\" onChange={this.handleChange} value={chat.message} autoComplete=\"off\" />\r\n                                                    <FormFeedback></FormFeedback>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md=\"1\">\r\n                                                <FormGroup>\r\n                                                    <Button color=\"primary\" disabled={!this.isMessageTyped()}>\r\n                                                        <i className=\"fa fa-paper-plane\" aria-hidden=\"true\" ></i>\r\n                                                    </Button>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form>\r\n                                    : null\r\n                                }\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Chat;","import { Component } from \"react\";\r\nimport { Register, Login } from '..';\r\nimport { Card, Col, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\r\nimport classnames from 'classnames';\r\n\r\nclass Auth extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            activeTab: '2'\r\n        };\r\n\r\n    }\r\n\r\n    toggle = (tab) => {\r\n        if (this.state.activeTab !== tab) this.setState({ activeTab: tab });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <div>\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                className={classnames({ active: this.state.activeTab === '1' })}\r\n                                onClick={() => { this.toggle('1') }}>\r\n                                Create your account\r\n\t\t\t\t\t\t\t\t</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                className={classnames({ active: this.state.activeTab === '2' })}\r\n                                onClick={() => { this.toggle('2') }}>\r\n                                Log in to Chat\r\n\t\t\t\t\t\t\t\t</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.state.activeTab} >\r\n                        <TabPane tabId=\"1\">\r\n                            <br />\r\n                            <Row >\r\n                                <Col md={12}>\r\n                                    <Card body>\r\n                                        {this.state.activeTab === '1' ? <Register /> : null}\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <br />\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <Card body>\r\n                                        {this.state.activeTab === '2' ? <Login /> : null}\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </div>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Auth;","import { Component } from \"react\";\r\nimport { Button, Card, CardBody, CardImg, CardSubtitle, CardTitle, Col, Form, FormFeedback, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { isAlpha } from \"validator\";\r\nimport { Constants } from '../../config';\r\nimport moment from \"moment\";\r\nimport $ from 'jquery';\r\n\r\nclass Profile extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => ({\r\n        user: {\r\n            _id: '',\r\n            eGender: '',\r\n            sFirstName: '',\r\n            sImage: '',\r\n            sLastName: '',\r\n            sUsername: '',\r\n            createdAt: '',\r\n            updatedAt: '',\r\n        },\r\n        files: {\r\n            dp: ''\r\n        },\r\n        errors: {},\r\n        response: {\r\n            status: '',\r\n            message: '',\r\n            error: ''\r\n        }\r\n    });\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                [e.target.name]: e.target.value\r\n            },\r\n            errors: {\r\n                ...this.state.errors,\r\n                [e.target.name]: ''\r\n            },\r\n            files: {\r\n                dp: e.target.files\r\n            }\r\n        });\r\n        //if (e.target.files[0]) {\r\n        //} else {\r\n        //$('.select').attr('disabled', true); \r\n        //}/\r\n    }\r\n\r\n    validate = () => {\r\n        const { user } = this.state;\r\n        let errors = {};\r\n        if (!isAlpha(user.sFirstName)) errors.sFirstName = 'First name must only contain alphabets.';\r\n        if (user.sFirstName === '') errors.sFirstName = 'First name cannot be empty.';\r\n        if (!isAlpha(user.sLastName)) errors.sLastName = 'Last name must only contain alphabets.';\r\n        if (user.sLastName === '') errors.sLastName = 'Last name cannot be empty.';\r\n        if (user.sUsername === '') errors.sUsername = 'Username cannot be empty.';\r\n        return errors;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const _id = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        const httpHeaders = {\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n        const options = {\r\n            method: 'GET',\r\n            headers: new Headers(httpHeaders)\r\n        }\r\n        fetch(`${Constants.REACT_APP_API_BASE_URL}/user/get?_id=${_id}`, options)\r\n            .then(async (success) => {\r\n                const response = await success.json();\r\n                localStorage.setItem('dp', response.data.sImage);\r\n                this.setState({\r\n                    'user': response.data\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { user } = this.state;\r\n        const errors = this.validate();\r\n        if (Object.keys(errors).length === 0) {\r\n            const token = localStorage.getItem('token');\r\n            const httpHeaders = {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n            const options = {\r\n                method: 'PATCH',\r\n                headers: new Headers(httpHeaders),\r\n                body: JSON.stringify({\r\n                    sFirstName: user.sFirstName,\r\n                    sLastName: user.sLastName,\r\n                    sUsername: user.sUsername\r\n                })\r\n            };\r\n            fetch(`${Constants.REACT_APP_API_BASE_URL}/user/update/${user._id}`, options)\r\n                .then(async (success) => {\r\n                    const response = await success.json();\r\n                    this.setState({ user, response });\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error: ', error);\r\n                });\r\n            this.setState(this.getInitialState());\r\n        } else {\r\n            this.setState({ errors });\r\n        }\r\n    }\r\n\r\n    uploadProfilePic = () => {\r\n        const { files } = this.state;\r\n        const _id = localStorage.getItem('_id');\r\n        const token = localStorage.getItem('token');\r\n        const data = new FormData();\r\n        data.append('_id', _id);\r\n        data.append('dp', files.dp[0]);\r\n        const httpHeaders = {\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n        const options = {\r\n            method: 'PATCH',\r\n            headers: new Headers(httpHeaders),\r\n            body: data\r\n        };\r\n        fetch(`${Constants.REACT_APP_API_BASE_URL}/user/upload/dp`, options)\r\n            .then((success) => {\r\n                return window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.log('error: ', error);\r\n            });\r\n        this.setState(this.getInitialState());\r\n    }\r\n\r\n    uploadButton = () => {\r\n        $('input[type=file]').trigger('click');\r\n    }\r\n\r\n    isFileSelected = () => {\r\n        const { dp } = this.state.files;\r\n        console.log(dp);\r\n        if (dp) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { user, errors, response } = this.state;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md=\"4\">\r\n                        <Card className=\"edit-profile-card\" style={{ borderColor: \"white\" }}>\r\n                            <CardImg top width=\"100%\" src={user.sImage} alt=\"Change your avatar\" style={{ borderRadius: \"50%\" }} />\r\n                            <br />\r\n                            <Row className=\"justify-content-center\">\r\n                                <Col md=\"5\">\r\n                                    <Button color=\"secondary\" onClick={this.uploadButton} block>Choose</Button>\r\n                                    <Input type=\"file\" accept=\"image/*\" multiple={false} style={{ display: \"none\" }} onChange={this.handleChange} />\r\n                                </Col>\r\n                                <Col md=\"5\">\r\n                                    <Button color=\"secondary\" onClick={this.uploadProfilePic} block disabled={!this.isFileSelected()}>Upload</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <CardBody>\r\n                                <CardTitle tag=\"h5\">{`${user.sFirstName} ${user.sLastName}`}</CardTitle>\r\n                                <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\"><i>@{user.sUsername}</i></CardSubtitle><br />\r\n                                <CardTitle tag=\"h6\">Joined {moment(user.createdAt).fromNow()}</CardTitle >\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md=\"8\">\r\n                        <Card className=\"edit-profile-card\" style={{ borderColor: \"white\" }}>\r\n                            <CardBody>\r\n                                <CardTitle tag=\"h5\" className=\"text-center text-muted\">Edit Profile</CardTitle>\r\n                                <Form onSubmit={this.handleSubmit}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"sFirstName\">First Name</Label>\r\n                                        <Input id=\"sFirstName\" name=\"sFirstName\" invalid={errors.sFirstName ? true : false} onChange={this.handleChange} value={user.sFirstName} autoComplete=\"off\" />\r\n                                        <FormFeedback></FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"sLastName\">Last Name</Label>\r\n                                        <Input id=\"sLastName\" name=\"sLastName\" invalid={errors.sLastName ? true : false} onChange={this.handleChange} value={user.sLastName} autoComplete=\"off\" />\r\n                                        <FormFeedback></FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"sUsername\">Username</Label>\r\n                                        <Input id=\"sUsername\" name=\"sUsername\" invalid={errors.sUsername ? true : false} onChange={this.handleChange} value={user.sUsername} autoComplete=\"off\" />\r\n                                        <FormFeedback></FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        {\r\n                                            response.message ?\r\n                                                (response.status > 400 ?\r\n                                                    (<div className=\"alert alert-danger\">{response.message}</div>)\r\n                                                    : (<div className=\"alert alert-success\">{response.message}</div>))\r\n                                                : (null)\r\n                                        }\r\n                                    </FormGroup>\r\n                                    <Button color=\"primary\" className=\"float-right\">Save Changes</Button>\r\n                                </Form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Profile;","import { Component } from \"react\";\r\nimport { Button, Col, Container, Form, FormFeedback, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { Constants } from '../../config';\r\n\r\nclass ResetPassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => ({\r\n        data: {\r\n            sPassword: '',\r\n            sConfirmPassword: ''\r\n        },\r\n        errors: {},\r\n        response: {\r\n            status: '',\r\n            message: '',\r\n            error: ''\r\n        }\r\n    });\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            data: {\r\n                ...this.state.data,\r\n                [e.target.name]: e.target.value\r\n            },\r\n            errors: {\r\n                ...this.state.errors,\r\n                [e.target.name]: ''\r\n            }\r\n        });\r\n    }\r\n\r\n    validate = () => {\r\n        const { data } = this.state;\r\n        let errors = {};\r\n        if (data.sPassword.length < 8) errors.sPassword = 'Password must be atleast 8 characters.'\r\n        if (data.sPassword === '') errors.sPassword = 'Password cannot be empty.';\r\n        if (data.sPassword !== data.sConfirmPassword) errors.sConfirmPassword = `Passwords doesn't match.`;\r\n        if (data.sConfirmPassword.length < 8) errors.sConfirmPassword = 'Password must be atleast 8 characters.'\r\n        if (data.sConfirmPassword === '') errors.sConfirmPassword = 'Password cannot be empty.';\r\n        return errors;\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { data } = this.state;\r\n        const errors = this.validate();\r\n        if (Object.keys(errors).length === 0) {\r\n            delete data['sConfirmPassword'];\r\n            const _id = localStorage.getItem('_id');\r\n            const token = localStorage.getItem('token');\r\n            const httpHeaders = {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n            const options = {\r\n                method: 'PUT',\r\n                headers: new Headers(httpHeaders),\r\n                body: JSON.stringify({\r\n                    _id,\r\n                    sPassword: data.sPassword\r\n                })\r\n            };\r\n            fetch(`${Constants.REACT_APP_API_BASE_URL}/auth/reset/password`, options)\r\n                .then(async (success) => {\r\n                    const response = await success.json();\r\n                    this.setState({ response });\r\n                    if (response.status === 200) {\r\n                        return window.location.assign('/chat');\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log('error: ', error);\r\n                });\r\n            this.setState(this.getInitialState());\r\n        } else {\r\n            this.setState({ errors });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { data, errors, response } = this.state;\r\n        return (\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col md=\"4\">\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"sPassword\">Password</Label>\r\n                                <Input id=\"sPassword\" name=\"sPassword\" type=\"password\" invalid={errors.sPassword ? true : false} onChange={this.handleChange} value={data.sPassword} />\r\n                                <FormFeedback>{errors.sPassword}</FormFeedback>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"sConfirmPassword\">Confirm Password</Label>\r\n                                <Input id=\"sConfirmPassword\" name=\"sConfirmPassword\" type=\"password\" invalid={errors.sConfirmPassword ? true : false} onChange={this.handleChange} value={data.sConfirmPassword} />\r\n                                <FormFeedback>{errors.sConfirmPassword}</FormFeedback>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                {\r\n                                    response.message ?\r\n                                        (response.status > 400 ?\r\n                                            (<div className=\"alert alert-danger\">{response.message}</div>)\r\n                                            : (<div className=\"alert alert-success\">{response.message}</div>))\r\n                                        : (null)\r\n                                }\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Button color=\"primary\" block>ResetPassword</Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResetPassword;","import './App.css';\r\nimport { Component } from 'react';\r\nimport { Auth, Header, Footer, Chat, Profile, ResetPassword } from './components';\r\nimport { Container, Col, Row } from 'reactstrap';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { verify } from 'jsonwebtoken';\r\nimport { Constants } from './config';\r\n\r\nclass App extends Component {\r\n\r\n\tisAuth = () => {\r\n\t\tconst _id = localStorage.getItem('_id');\r\n\t\tconst token = localStorage.getItem('token');\r\n\t\tif (!_id || !token) return false;\r\n\t\tconst decoded = verify(token, Constants.REACT_APP_JWT_SECRET_KEY);\r\n\t\tif (decoded._id === _id) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!this.isAuth()) {\r\n\t\t\treturn (\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Auth />\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Footer />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Router>\r\n\t\t\t\t\t\t<Route path=\"/chat\" component={Chat} />\r\n\t\t\t\t\t\t<Route path=\"/profile\" component={Profile} />\r\n\t\t\t\t\t\t<Route path=\"/reset\" component={ResetPassword}></Route>\r\n\t\t\t\t\t</Router>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Footer />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\r\n"],"sourceRoot":""}